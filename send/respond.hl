
/*
 * Allows user to respond to another email, by creating for instance a reply, or forward the email to others.
 *
 * Expects [email-id] being ID of email from database, which is an email being responded to.
 * Optionally pass in [is-forward], and set it to boolean true, to signal this is not a reply, but a forward
 * operation instead.
 *
 * Will delete any "reader widgets", if existing, and replace with a "reply widget".
 * Otherwise, it will simply append the respond widget to the main "root reader widget surface".
 */





/*
 * Opening up database.
 */
p5.mysql.connect:[sephia]

  /*
   * Selecting email data from database.
   */
  p5.mysql.select:@"select * from email inner join contact on email.sender = contact.id where email.id = @emailid"
    @emailid:x:/../*/email-id?value

  /*
   * Creating our "respond widget".
   * Making sure we get the "Re:"/"Fwd:" parts in subject, but only if it does NOT exist from before.
   */
  if:x:/../*/is-forward?value.bool
    and
      fetch:x:/0/0?value
        index-of:x:/@p5.mysql.select/0/*/subject?value
          src:"Fwd:"
      =:int:0
      not

    /*
     * Email subject does not already start with "Fwd:".
     */
    set:x:/@p5.mysql.select/0/*/subject?value
      src:"Fwd: {0}"
        :x:/@p5.mysql.select/0/*/subject?value

  else-if:x:/../*/is-forward?value
    not
    and
      fetch:x:/0/0?value
        index-of:x:/@p5.mysql.select/0/*/subject?value
          src:"Re:"
      =:int:0
      not

    /*
     * Email subject does not already start with "Re:".
     * Prepending subject with "Re:".
     */
    set:x:/@p5.mysql.select/0/*/subject?value
      src:"Re: {0}"
        :x:/@p5.mysql.select/0/*/subject?value



  /*
   * Making sure we avoid "HTML injection", also in subject of email!
   */
  p5.html.html-encode:x:/@p5.mysql.select/0/*/subject?value

  /*
   * Selecting email content from "part" table in database.
   */
  p5.mysql.select:@"select * from part where emailid = @emailid"
    @emailid:x:/../*/email-id?value
  _content

  /*
   * Formatting content, prepending each line with a ">", but only if email has plain text content.
   */
  if:x:/@p5.mysql.select/*/*/type/=plain

    /*
     * Stripping away any previous signatures in body.
     */
    eval-x:x:/+
    _tmp-content:x:/@p5.mysql.select/*/*/type/=plain/./*/content?value
    index-of:x:/@_tmp-content?value
      src:@"

-- 
"
    if:x:/@index-of/*?count
      =:int:1

      /*
       * Content of email has a previously added signature, making sure we "strip" it away.
       */
      split:x:/@_tmp-content?value
        =:x:/@index-of/0/-?value
      set:x:/@_tmp-content?value
        src:x:/@split/0?name

    /*
     * Plain text content.
     * Checking if this is forward operation first.
     */
    if:x:/../*/is-forward?value

      /*
       * Forward.
       */
      p5.html.html-encode:x:/@_tmp-content?value
      set:x:/@_content?value
        src:x:/@p5.html.html-encode?value

    else

      /*
       * Reply.
       */
      replace:>{0}
        :x:/@_tmp-content?value
        src:"\r\n"
        dest:"\r\n>"
      trim-right:x:/@replace?value
        chars:">"
      p5.html.html-encode:x:/@trim-right?value
      set:x:/@_content?value
        src:x:/@p5.html.html-encode?value

  else

    /*
     * HTML content (only).
     *
     * Displaying raw HTML, since we have no real options here.
     *
     * Whether or not this is a forward operation or not is not important.
     */
    p5.html.html-encode:x:/@p5.mysql.select/*/*/type/=html/./*/content?value
    set:x:/@_content?value
      src:x:/@p5.html.html-encode?value

  /*
   * Retrieving sender, cc and bcc from original email and using as default "To" part for reply.
   */
  _to
  _cc
  _bcc
  if:x:/../*/is-forward?value
    not

    /*
     * This is not a forward operation, making sure default "To" field becomes original sender.
     */
    p5.mysql.select:@"select * from contact inner join email on email.sender = contact.id where email.id = @emailid"
      @emailid:x:/../*/email-id?value
    set:x:/@_to?value
      src:x:/@p5.mysql.select/*/*/email?value

    /*
     * Then Cc and Bcc.
     */
    p5.mysql.select:@"select * from contact inner join recipient on contact.id = recipient.contactid where recipient.emailid = @emailid"
      @emailid:x:/../*/email-id?value

    /*
     * Building our "Cc" list.
     */
    for-each:x:/@p5.mysql.select/*/*/type/=Cc/./*/email?value
      set:x:/@_cc?value
        src:{0}, {1}
          :x:/@_cc?value
          :x:/@_dp?value
    set:x:/@_cc?value
      trim-left:x:/@_cc?value
        chars:", "

    /*
     * Building our "Bcc" list.
     */
    for-each:x:/@p5.mysql.select/*/*/type/=Bcc/./*/email?value
      set:x:/@_bcc?value
        src:{0}, {1}
          :x:/@_bcc?value
          :x:/@_dp?value
    set:x:/@_bcc?value
      trim-left:x:/@_bcc?value
        chars:", "

  /*
   * Checking if there exists a "reader widget" for email, at which point, we simply replace it, with a "reply widget".
   */
  p5.web.widgets.find:sephia-read-emails
    _email-id:x:/../*/email-id?value

  if:x:/@p5.web.widgets.find/*/*?value

    /*
     * A "reader widget" exists for email, replacing it with our "reply widget".
     */
    add:x:/..p5.mysql.connect/*/sys42.utilities.execute-lambda-file
      src
        after:x:/@p5.web.widgets.find/*/*?value

  /*
   * Invoking file responsible for creating our actual "create email widget".
   *
   * Now parametrized with all data from "respond email".
   */
  eval-x:x:/+/*
  sys42.utilities.execute-lambda-file:@SEPHIA/send/create.hl
    email-id:x:/../*/email-id?value
    subject:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/0/*/subject?value
    body:x:/@_content?value
    to:x:/@_to?value
    cc:x:/@_cc?value
    bcc:x:/@_bcc?value

  /*
   * Deleting "reader widget", if it exists.
   */
  if:x:/@p5.web.widgets.find/*/*?value
    delete-widget:x:/@p5.web.widgets.find/*/*?value
