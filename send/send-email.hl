
/*
 * Responsible for sending an email.
 *
 * Expects [To], [Cc], [Bcc], [subject] and [body], in addition to [attachment]s, containing [_filename], [_prefix]
 * and [_folder] for each file.
 *
 * Optionally, pass in [send-unencrypted] as true, if you wish to force sending an unencrypted email.
 *
 * If you pass in [send-unencrypted] as false, or not at all, then this file will return false.
 *
 * File will return boolean true if email was successfully sent.
 */





/*
 * Retrieving SMTP settings, which we will need further down, to actually send the email.
 */
p5.auth.my-settings.get





/*
 * Adding recipients.
 */
whoami
p5.mysql.connect:[sephia]

  /*
   * Adding "To", "Cc" and "Bcc" fields.
   *
   * Notice, we split upon ",", and trim each resulting value, before doing a lookup into the database,
   * to retrieve the name for the current email address being iterated.
   */
  for-each:x:/../*(/To|/Cc|/Bcc)?name
    split:x:/../*/{0}?value
      :x:/@_dp?value
      =:,
      trim:true

    /*
     * Looping through each email resulting from the above split operation.
     */
    for-each:x:/@split/*?name

      /*
       * Finding email address' name property from database.
       */
      p5.mysql.select:@"select name, email from contacts where username = @username and email = @email"
        @username:x:/@whoami/*/username?value
        @email:x:/@_dp?value

      /*
       * Checking if above SQL yielded anything.
       */
      if:x:/@p5.mysql.select/*

        /*
         * We have an existing name entry in our database for the current email address.
         */
        add:x:/../*/p5.smtp.send/*/envelope/*/{0}
          :x:/..for-each/..for-each/*/_dp?value
          src:"{0}:{1}"
            :x:/@p5.mysql.select/*/*/name?value
            :x:/@p5.mysql.select/*/*/email?value
      else

        /*
         * We do not have a contact for this email address, defaulting name to "Anonymous".
         */
        add:x:/../*/p5.smtp.send/*/envelope/*/{0}
          :x:/..for-each/..for-each/*/_dp?value
          src:"Anonymous:{0}"
            :x:/@_dp?value





/*
 * Adding "From".
 */
add:x:/../*/p5.smtp.send/*/envelope/*/From
  src:"{0}:{1}"
    :x:/@p5.auth.my-settings.get/*/sephia/*/name?value
    :x:/@p5.auth.my-settings.get/*/sephia/*/email?value





/*
 * Adding attachments, first into invocation of execute-lambda-file that saves attachments to the database.
 */
apply:x:/../*/sys42.utilities.execute-lambda-file/[0,1]
  src:x:/../*/attachment
  template
    file
      {folder}:x:/*/_folder?value
      {filename}:x:/*/_filename?value
      {prefix}:x:/*/_prefix?value





/*
 * Then adding attachments into [p5.smtp.send] invocation.
 */
for-each:x:/../*/attachment

  /*
   * Retrieving MIME type, notice, if this invocation returns nothing, then file type is unsupported.
   */
  eval-x:x:/+/*
  sys42.utilities.execute-lambda-file:@SEPHIA/common/get-mime-type.hl
    file:x:/@_dp/#/*/_filename?value

  /*
   * Verifying that file extension is actually supported, before creating attachment.
   * Notice, unsupported filetypes, which should have been impossible to actually add, are simply ignored.
   */
  if:x:/@sys42.utilities.execute-lambda-file/*

    /*
     * File extension is supported filetype, adding MIME type, with (possibly) a "Content-Transfer-Encoding", as returned
     * from "get-mime-type.hl".
     */
    add:x:/../*/p5.smtp.send/*/envelope/*/body/*/multipart
      src:x:/@sys42.utilities.execute-lambda-file/*

    /*
     * Adding "Content-Disposition" MIME header and physical filename on disc.
     */
    eval-x:x:/+/*/*
    add:x:/../*/p5.smtp.send/*/envelope/*/body/*/multipart/0/-
      src
        Content-Disposition:@"attachment; filename=""{0}"""
          :x:/@_dp/#/*/_filename?value
        filename:{0}{1}{2}
          :x:/@_dp/#/*/_folder?value
          :x:/@_dp/#/*/_prefix?value
          :x:/@_dp/#/*/_filename?value





/*
 * Then verifying we have a public PGP key for all recipients, 
 * but only doing this if caller has not "overridden" check.
 */
_encrypt:bool:false
if:x:/../*/send-unencrypted?value
  not

  /*
   * Verifying we have a public key for all recipients of email.
   */
  p5.crypto.list-public-keys:x:/../*/p5.smtp.send/*/envelope/*(/To|/Cc|/Bcc)/*?value

  /*
   * Looping through to check that we have public certificates for all recipients.
   */
  if:x:/@p5.crypto.list-public-keys/*?count
    <:x:/../*/p5.smtp.send/*/envelope/*(/To|/Cc|/Bcc)/*?count

    /*
     * Missing public PGP certificate, returning false.
     */
    return:bool:false

  /*
   * If we've come this far, we have public PGP keys for all recipients.
   */
  set:x:/@_encrypt?value
    src:bool:true





/*
 * Checking to see if we should encrypt email.
 */
if:x:/@_encrypt?value

  /*
   * Yup, encrypting!
   *
   * Adding each recipient (To, Cc, Bcc) up as [encrypt] keys for MIME message.
   */
  add:x:/+/*/*
    src:x:/../*/p5.smtp.send/*/envelope/*(/To|/Cc|/Bcc)/*
  add:x:/../*/p5.smtp.send/*/envelope/*/body/*/multipart
    src
      encrypt
  set:x:/../*/p5.smtp.send/*/envelope/*/body/*/multipart/*/encrypt/*?name
    src:email

  /*
   * Making sure we store the fact that email was sent encrypted into execution of file that saves email into database.
   */
  add:x:/../*/sys42.utilities.execute-lambda-file/[0,1]
    src
      encrypted:int:1

else

  /*
   * Nope, not encrypting!
   */
  add:x:/../*/sys42.utilities.execute-lambda-file/[0,1]
    src
      encrypted:int:0





/*
 * Checking if we should sign email.
 */
if:x:/@p5.auth.my-settings.get/*/sephia/*/gpg-fingerprint?value
  !=:
  and:x:/@p5.auth.my-settings.get/*/sephia/*/gpg-password?value
    !=:

  /*
   * Yup, signing email!
   */
  add:x:/../*/p5.smtp.send/*/envelope/*/body/*/multipart
    src
      sign
        fingerprint:x:/@p5.auth.my-settings.get/*/sephia/*/gpg-fingerprint?value
          password:x:/@p5.auth.my-settings.get/*/sephia/*/gpg-password?value





/*
 * Puuh ...!!
 *
 * Constructing and sending email.
 */
eval-x:x:/../*/p5.smtp.send/*/envelope/*(/Subject|/body/*/multipart/*(/sign/**|/text/=plain/[0,1]/*/content))
add:x:/../*/sys42.utilities.execute-lambda-file/[0,1]
  src:x:/../*/p5.smtp.send/*/envelope
sys42.utilities.execute-lambda-file:@SEPHIA/send/save-envelope.hl
p5.smtp.send
  envelope
    To
    Cc
    Bcc
    From
    Subject:x:/../*/subject?value
    body
      multipart:mixed
        text:plain
          content:x:/../*/body?value






/*
 * Returning success to caller.
 */
return:bool:true
