
/*
 * Allows user to create a reply to an email.
 *
 * Expects (optionally) [email-id] being ID of email from database.
 *
 * Will delete any "reader widgets" (if existing), and replace with a "reply widget".
 * If no "reader widget" exists for email, it will create a new "reply widget", 
 * and append into the "main root reader surface".
 */





/*
 * Opening up database.
 */
p5.mysql.connect:[sephia]

  /*
   * Selecting email data from database.
   */
  p5.mysql.select:@"select * from email 
inner join contact on email.sender = contact.id
where email.id = @emailid"
    @emailid:x:/../*/email-id?value

  /*
   * Creating our "reply widget".
   * Making sure we get the "Re: " parts in subject, but only if it does NOT exist from before.
   */
  if
    fetch:x:/0/0?value
      index-of:x:/@p5.mysql.select/0/*/subject?value
        src:"Re:"
    =:int:0
    not

    /*
     * Email subject does not already start with "Re:".
     * Prepending subject with "Re:".
     */
    set:x:/@p5.mysql.select/0/*/subject?value
      src:"Re: {0}"
        :x:/@p5.mysql.select/0/*/subject?value

  /*
   * Making sure we avoid "HTML injection", also in subject of email!
   */
  p5.html.html-encode:x:/@p5.mysql.select/0/*/subject?value

  /*
   * Selecting email content from "part" table in database.
   */
  p5.mysql.select:@"select * from part where emailid = @emailid"
    @emailid:x:/../*/email-id?value
  _content

  /*
   * Formatting content, prepending each line with a ">", but only if email has plain text content.
   */
  if:x:/@p5.mysql.select/*/*/type/=plain

    /*
     * Plain text content.
     */
    replace:>{0}
      :x:/@p5.mysql.select/*/*/type/=plain/./*/content?value
      src:"\r\n"
      dest:"\r\n>"
    trim-right:x:/@replace?value
      chars:">"
    p5.html.html-encode:x:/@trim-right?value
    set:x:/@_content?value
      src:x:/@p5.html.html-encode?value

  else

    /*
     * HTML content (only).
     *
     * Displaying raw HTML, since we have no real options here.
     */
    p5.html.html-encode:x:/@p5.mysql.select/*/*/type/=html/./*/content?value
    set:x:/@_content?value
      src:x:/@p5.html.html-encode?value

  /*
   * Retrieving sender from original email and using as default "To" part for reply.
   */
  p5.mysql.select:@"select * from contact inner join email on email.sender = contact.id where email.id = @emailid"
    @emailid:x:/../*/email-id?value
  eval-x:x:/+
  _to:x:/@p5.mysql.select/*/*/email?value

  /*
   * Then Cc (and Bcc, which technically shouldn't exist for most cases, but to make sure, we loop through also "Bcc").
   * There are a lot of "funny" email programs out there ...!! :P (that's NOT a compliment!)
   */
  p5.mysql.select:@"select * from contact inner join recipient on contact.id = recipient.contactid 
where recipient.emailid = @emailid"
    @emailid:x:/../*/email-id?value

  /*
   * Building our "Cc" list.
   */
  _cc
  for-each:x:/@p5.mysql.select/*/*/type/=Cc/./*/email?value
    set:x:/@_cc?value
      src:{0}, {1}
        :x:/@_cc?value
        :x:/@_dp?value
  trim-left:x:/@_cc?value
    chars:", "

  /*
   * Building our "Bcc" list.
   */
  _bcc
  for-each:x:/@p5.mysql.select/*/*/type/=Bcc/./*/email?value
    set:x:/@_bcc?value
      src:{0}, {1}
        :x:/@_bcc?value
        :x:/@_dp?value
  trim-left:x:/@_bcc?value
    chars:", "

  /*
   * Checking if there exists a "reader widget" for email, at which point, we simply replace it, with a "reply widget".
   */
  p5.web.widgets.find:sephia-read-emails
    _email-id:x:/../*/email-id?value

  if:x:/@p5.web.widgets.find/*/*?value

    /*
     * A "reader widget" exists for email, replacing it with our "reply widget".
     */
    add:x:/..p5.mysql.connect/*/create-widget
      src
        after:x:/@p5.web.widgets.find/*/*?value

  else

    /*
     * No existing "reader widget" for this email, simply appending a new reply widget into "main reader root surface".
     */
    add:x:/..p5.mysql.connect/*/create-widget
      src
        parent:sephia-read-emails

    /*
     * Informing user he can find his "reply widget" at the bottom of the page.
     */
    sys42.windows.info-tip:You can find your reply widget at the bottom of the page.

  /*
   * Creating our actual widget.
   */
  create-widget
    _email-id:x:/../*/email-id?value
    _is-reply:true
    class:sephia-email-reply col-xs-12
    events

      /*
       * Returns the email, according to what data the user has supplied.
       *
       * Expects [_arg] (main value of invocation) being ID of widget to retrieve email from.
       */
      sephia.get-email

        /*
         * Verifying this invocation was meant for the current instance.
         */
        if:x:/../*/_event?value
          !=:x:/../*/_arg?value

          /*
           * Event was fired for a different widget.
           */
          return

        /*
         * Finding and returning all email data for current instance.
         */
        p5.web.widgets.find:x:/../*/_event?value
          _to-field-to
        p5.web.widgets.find:x:/../*/_event?value
          _to-field-cc
        p5.web.widgets.find:x:/../*/_event?value
          _to-field-bcc
        p5.web.widgets.find:x:/../*/_event?value
          _subject
        p5.web.widgets.find:x:/../*/_event?value
          _body
        p5.web.widgets.find:x:/../*/_event?value
          _reply-attachment

        /*
         * Retrieving values of all widgets found above.
         */
        p5.web.widgets.property.get:x:/../*/p5.web.widgets.find/[0,1]/*/*?value
          value
        p5.web.widgets.property.get:x:/../*/p5.web.widgets.find/[1,2]/*/*?value
          value
        p5.web.widgets.property.get:x:/../*/p5.web.widgets.find/[2,3]/*/*?value
          value
        p5.web.widgets.property.get:x:/../*/p5.web.widgets.find/[3,4]/*/*?value
          value
        p5.web.widgets.property.get:x:/../*/p5.web.widgets.find/[4,5]/*/*?value
          value
        p5.web.widgets.property.get:x:/../*/p5.web.widgets.find/[5,6]/*/*?value
          _folder
          _filename
          _prefix
        set:x:/@p5.web.widgets.property.get/*?name
          src:attachment

        /*
         * Returning email to caller.
         */
        add:x:/+2
          src:x:/@p5.web.widgets.property.get/*
        eval-x:x:/+/*
        return
          To:x:/../*/p5.web.widgets.property.get/[0,1]/*/*?value
          Cc:x:/../*/p5.web.widgets.property.get/[1,2]/*/*?value
          Bcc:x:/../*/p5.web.widgets.property.get/[2,3]/*/*?value
          subject:x:/../*/p5.web.widgets.property.get/[3,4]/*/*?value
          body:x:/../*/p5.web.widgets.property.get/[4,5]/*/*?value

    widgets

      /*
       * Attachments "drag'n'drop" widget.
       *
       * Notice, we only allow hl, txt, md, zip, png, jpg, jpeg and gif files, to avoid spreading viruses around.
       *
       * Maybe we could have extended this list slightly, but at least these files are definitely safe!
       */
      sys42.widgets.uploader
        filter:hl|txt|md|zip|png|jpg|jpeg|gif
        allow-multiple:true
        class:sephia-uploader
        clickable:false
        .onupload

          /*
           * Invoking file responsible for accepting uploaded file, and adding a widget for file into main "reply widget".
           *
           * Notice, we simply pass in all arguments flat.
           */
          add:x:/+
            src:x:/./--
          sys42.utilities.execute-lambda-file:@SEPHIA/inbox/upload.hl

      /*
       * Subject of email.
       */
      input
        type:text
        class:form-control sephia-reply-subject
        placeholder:Subject ...
        _subject
        oninit

          /*
           * Making sure "Subject" of email gets initial focus.
           */
          p5.web.send-javascript:@"$('#{0}').focus().select();"
            :x:/../*/_event?value
        value:x:/@p5.mysql.connect/*/p5.html.html-encode/[0,1]?value

      /*
       * Body of email.
       */
      textarea
        rows:13
        class:form-control
        placeholder:Content ...
        _body
        innerValue:x:/@_content?value

      /*
       * Recipients of email.
       * Wraps "To", "Cc" and "Bcc" textboxes.
       *
       * All of these textboxes renders "responsively" on page, to accommodate for devices with smaller screens.
       */
      div
        class:prepend-top row
        widgets

          /*
           * "To" field.
           *
           * Notice, these email address(es) are stored comma separated in a simple textbox, 
           * meaning we'll have to do some parsing, when actually sending email later.
           *
           * This allows the user to simply type in an addition email address, without having to go through the 
           * "add contact" form, if he doesn't want to do such.
           */
          div
            class:col-xs-12 col-md-4 prepend-bottom
            widgets
              div
                class:input-group
                _to-field
                widgets
                  span
                    class:input-group-addon
                    innerValue:To
                  input
                    type:text
                    class:form-control sephia-recipient
                    placeholder:To ...
                    value:x:/@_to?value
                    _to-field-to
                  span
                    class:input-group-btn
                    widgets
                      button
                        class:btn btn-default
                        innerValue:@"<span class=""glyphicon glyphicon-remove""></span>"
                        onclick

                          /*
                           * Removing entire value from textbox widget, and setting focus to textbox.
                           */
                          p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                            _to-field
                          p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                            element:input
                          p5.web.widgets.property.set:x:/@p5.web.widgets.find/*/*?value
                            value:
                          p5.web.send-javascript:@"$('#{0}').focus();"
                            :x:/@p5.web.widgets.find/*/*?value

                      button
                        class:btn btn-default
                        innerValue:@"<span class=""glyphicon glyphicon-plus""></span>"
                        onclick

                          /*
                           * Executing file that is reponsible for retrieving a new email address from "contact" table,
                           * making sure we pass in widget ID for widget, where result should be added.
                           */
                          p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                            _to-field
                          p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                            element:input
                          eval-x:x:/+/*
                          sys42.utilities.execute-lambda-file:@SEPHIA/inbox/add-recipient.hl
                            widget:x:/@p5.web.widgets.find/*/*?value


          /*
           * "Cc" field.
           *
           * Notice, these email address(es) are stored comma separated in a simple textbox, 
           * meaning we'll have to do some parsing, when actually sending email later.
           *
           * This allows the user to simply type in an addition email address, without having to go through the 
           * "add contact" form, if he doesn't want to do such.
           */
          div
            class:col-xs-12 col-md-4 prepend-bottom
            widgets
              div
                class:input-group
                _to-field
                widgets
                  span
                    class:input-group-addon
                    innerValue:Cc
                  input
                    type:text
                    class:form-control sephia-recipient
                    placeholder:Cc ...
                    value:x:/..p5.mysql.connect/*/trim-left/[0,1]?value
                    _to-field-cc
                  span
                    class:input-group-btn
                    widgets
                      button
                        class:btn btn-default
                        innerValue:@"<span class=""glyphicon glyphicon-remove""></span>"
                        onclick

                          /*
                           * Removing entire value from textbox widget, and setting focus to textbox.
                           */
                          p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                            _to-field
                          p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                            element:input
                          p5.web.widgets.property.set:x:/@p5.web.widgets.find/*/*?value
                            value:
                          p5.web.send-javascript:@"$('#{0}').focus();"
                            :x:/@p5.web.widgets.find/*/*?value
                      button
                        class:btn btn-default
                        innerValue:@"<span class=""glyphicon glyphicon-plus""></span>"
                        onclick

                          /*
                           * Executing file that is reponsible for retrieving a new email address from "contact" table,
                           * making sure we pass in widget ID for widget where result should be added.
                           */
                          p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                            _to-field
                          p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                            element:input
                          eval-x:x:/+/*
                          sys42.utilities.execute-lambda-file:@SEPHIA/inbox/add-recipient.hl
                            widget:x:/@p5.web.widgets.find/*/*?value


          /*
           * "Bcc" field.
           *
           * Notice, these email address(es) are stored comma separated in a simple textbox, 
           * meaning we'll have to do some parsing, when actually sending email later.
           *
           * This allows the user to simply type in an addition email address, without having to go through the 
           * "add contact" form, if he doesn't want to do such.
           */
          div
            class:col-xs-12 col-md-4 prepend-bottom
            widgets
              div
                class:input-group
                _to-field
                widgets
                  span
                    class:input-group-addon
                    innerValue:Bcc
                  input
                    type:text
                    class:form-control sephia-recipient
                    placeholder:Bcc ...
                    value:x:/..p5.mysql.connect/*/trim-left/[1,2]?value
                    _to-field-bcc
                  span
                    class:input-group-btn
                    widgets
                      button
                        class:btn btn-default
                        innerValue:@"<span class=""glyphicon glyphicon-remove""></span>"
                        onclick

                          /*
                           * Removing entire value from textbox widget, and setting focus to textbox.
                           */
                          p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                            _to-field
                          p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                            element:input
                          p5.web.widgets.property.set:x:/@p5.web.widgets.find/*/*?value
                            value:
                          p5.web.send-javascript:@"$('#{0}').focus();"
                            :x:/@p5.web.widgets.find/*/*?value
                      button
                        class:btn btn-default
                        innerValue:@"<span class=""glyphicon glyphicon-plus""></span>"
                        onclick

                          /*
                           * Executing file that is reponsible for retrieving a new email address from "contact" table,
                           * making sure we pass in widget ID for widget where result should be added.
                           */
                          p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                            _to-field
                          p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                            element:input
                          eval-x:x:/+/*
                          sys42.utilities.execute-lambda-file:@SEPHIA/inbox/add-recipient.hl
                            widget:x:/@p5.web.widgets.find/*/*?value

      /*
       * Attachment widget.
       *
       * This guys will contain one "button" for each attachment that has been uploaded.
       */
      container
        _attachment-wrapper
        class:sephia-attachments

      /*
       * Necessary, since the attachments are rendered floating.
       */
      literal
        element:div
        class:clearfix

      /*
       * "Action buttons" (send, discard).
       */
      div
        class:text-right
        widgets
          div
            class:btn-group
            role:group
            widgets

              /*
               * Send button.
               */
              button
                class:btn btn-default sephia-action-button
                innerValue:@"<span class=""glyphicon glyphicon-send""></span>"
                title:Send reply
                onclick

                  /*
                   * Retrieving main "root widget" for reply surface.
                   */
                  p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                    _is-reply

                  /*
                   * Retrieving data for email, by invoking "lambda event" for widget, that should return
                   * whatever data the user has supplied.
                   *
                   * Notice, this event requires an [_arg] being the ID of the main root "reply/compose" widget.
                   * Hence, we retrieve that widget above, and pass it into our event invocation.
                   */
                  sephia.get-email:x:/@p5.web.widgets.find-first-ancestor/*/*?value

                  /*
                   * Sanity check.
                   */
                  if:x:/@sephia.get-email/*/To?value
                    =:
                    or:x:/@sephia.get-email/*/subject?value
                      =:
                    or:x:/@sephia.get-email/*/body?value
                      =:

                    /*
                     * Oops, returning early!
                     */
                    sys42.windows.info-tip:An email needs at least one recipient (To), a Subject and some Content.
                      class:info-window info-window-error info-window-longer
                    return

                  /*
                   * Invoking file responsible for sending email, adding all necessary associated fields.
                   *
                   * Notice, we provide a callback, which will be invoked if the file needs to display a "warning"
                   * about that we did not have all recipients' public PGP keys.
                   */
                  eval-x:x:/+2/*/.encryption-warning/*
                  add:x:/+
                    src:x:/@sephia.get-email/*
                  sys42.utilities.execute-lambda-file:@SEPHIA/inbox/send.hl
                    .encryption-warning

                      /*
                       * Making sure that if user clicks "OK" after being warned about sending unencrypted emails,
                       * we try again, this time "forcing" email to be sent.
                       *
                       * Notice, no need to "clean up here", since we're "recursively invoking self", which will clean
                       * up things for us.
                       */
                      p5.web.widgets.ajax-events.raise:x:/../*/_event?value
                        onclick

                  /*
                   * Checking if email was successfully sent.
                   */
                  if:x:/@sys42.utilities.execute-lambda-file?value
                    =:bool:true

                    /*
                     * Success!
                     *
                     * Notifying user, and re-databinding datagrid, before deleting entire "reply widget".
                     */
                    sys42.windows.info-tip:Email was successfully sent!
                    clear-widget:sephia-datagrid
                    sys42.utilities.execute-lambda-file:@SEPHIA/inbox/show.hl
                    delete-widget:x:/@p5.web.widgets.find-first-ancestor/*/*?value

              /*
               * "Discard reply" button.
               */
              button
                class:btn btn-default sephia-action-button
                innerValue:@"<span class=""glyphicon glyphicon-trash""></span>"
                title:Discard reply
                onclick

                  /*
                   * Deleting "reply widget" and removing "open" CSS class on datagrid.
                   */
                  p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                    _is-reply
                  p5.web.widgets.property.get:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                    _email-id
                  p5.web.widgets.find:sephia-datagrid
                    _email-id:x:/@p5.web.widgets.property.get/*/*?value
                  sys42.utilities.delete-css-classes:x:/@p5.web.widgets.find/*/*?value
                    class:sephia-open
                  delete-widget:x:/@p5.web.widgets.find-first-ancestor/*/*?value

  /*
   * Deleting "reader widget", if it exists.
   */
  if:x:/@p5.web.widgets.find/*/*?value
    delete-widget:x:/@p5.web.widgets.find/*/*?value
