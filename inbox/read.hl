
/*
 * Opens an email for reading.
 *
 * Expects [email-id] being ID of email from database.
 * Optionally pass in [after], being widget where the widget will be created after.
 * Optionally, also pass in [force], to force the email to be opened, even if it is already open.
 * This is necessary to allow our "discard reply" logic to work, allowing for the email to be re-opened,
 * even though it is already open, since it opens up the reader, before deleting the reply widget.
 *
 * Will create a widget, wrapping all relevant data for email, and inject into "reader widget" on page, allowing
 * user to reply to email if he wishes.
 */





/*
 * Loading all files from "reader-action-buttons" and assuming their some sort of widgets, and adding
 * them into our "input-group-btn" div widget as such.
 */
list-files:@SEPHIA/inbox/reader-action-buttons/
  filter:.hl
load-file:x:/@list-files/*?name
add:x:/../**/create-widget/**/div/*/class/=~btn-group/./*/widgets
  src:x:/@load-file/*/*





/*
 * Checking if email is already open.
 */
p5.web.widgets.find:sephia-read-emails
  _email-id:x:/../*/email-id?value.string
if:x:/../*/force?value.bool
  not
  and:x:/@p5.web.widgets.find/*/*

  /*
   * Email has already been opened for reading.
   *
   * Scrolling email into view.
   */
  p5.web.send-javascript:@"$('#{0}')[0].scrollIntoView();"
    :x:/@p5.web.widgets.find/*/*?value
  return





/*
 * Retrieving email with specified ID from database.
 */
p5.mysql.connect:[sephia]
  whoami

  /*
   * Retrieving attachments for email.
   */
  p5.mysql.select:@"select * from attachments where emailid = @emailid"
    @emailid:x:/../*/email-id?value

  /*
   * Applying attachments into the [widgets] collection of our "attachment widget".
   *
   * The [apply] Active Event, allows you to "braid" together a datasource, with a template, and put the results of
   * this "braiding operation" into some destination node as children.
   *
   * Notice, only attachments matching our "whitelist" in regards to file extensions are legally allowed to be downloaded.
   * This is to prevent users from downloading viruses, and other types of malware.
   *
   * Legal filenames are;
   * - txt
   * - md
   * - zip
   * - png
   * - jpg
   * - jpeg (sometimes jpeg files are saved with different file extensions)
   * - gif
   * - hl (Hyperlambda file)
   *
   * All other file types are impossible to download from Sephia Mail!
   */
  apply:x:/../**/div/*/class/=sephia-attachments/./*/widgets
    src:x:/@p5.mysql.select/*
    template
      button
        class:sephia-attachment
        oninit

          /*
           * Making sure file extension is in "whitelist", otherwise preventing download of file.
           */
          {_filename}:x:/*/filename?value
          split:x:/@_filename?value
            =:.
          switch:x:/@split/0/-?name
            case:txt
            case:md
            case:zip
            case:png
            case:jpg
            case:jpeg
            case:gif
            case:hl

              /*
               * These files are allowed to be downloaded.
               */
              break

            default

              /*
               * Denying download of file!
               * First giving visual clues.
               */
              sys42.utilities.add-css-classes:x:/../*/_event?value
                class:sephia-sandboxed-attachment

              /*
               * Then replacing the original [onclick] Ajax event, with another lambda object, informing user that he
               * cannot download this attachment.
               */
              p5.web.widgets.ajax-events.set:x:/../*/_event?value
                onclick

                  /*
                   * Using a modal window to warn user.
                   */
                  sys42.windows.modal
                    header:WARNING!!
                    body:@"<p class=""text-danger"">These types of files can contain viruses and other types of 
malware that can destroy your computer. Hence to make sure your computer stays safe, 
we have explicitly turned OFF downloading of such files!</p>
<p>Sorry, Sephia Mail <strong>never</strong> compromises security for convenience ...</p>"

        onclick

          /*
           * "Databound" in above [apply].
           *
           * Thes nodes, wrapped with curly braces {}, are databound relative to the currently iterated datasource.
           */
          {_filename}:x:/*/filename?value
          {_folder}:x:/*/folder?value
          {_prefix}:x:/*/prefix?value

          /*
           * Letting the CMS "download event" do the heavy lifting ...
           *
           * Notice, the files are stored with different names, to make sure they each have a unique name, to avoid having
           * a new attachment, with the same filename, overwrite a previously downloaded attachment, from another email.
           * This is being done automatically in the [p5.pop3.get] Active Event.
           *
           * Hence, we must use a "prefix", "folder" in addition to "filename" to figure out the correct path to file.
           */
          eval-x:x:/+/*/filename
          sys42.cms.download-file:{0}{1}{2}
            :x:/@_folder?value
            :x:/@_prefix?value
            :x:/@_filename?value
            filename:x:/@_filename?value

        widgets
          span
            {innerValue}:x:/*/filename?value

  /*
   * Retrieving all recipients.
   */
  p5.mysql.select:@"select name, email from contact 
inner join recipient on contact.id = recipient.contactid
where recipient.emailid = @emailid"
    @emailid:x:/../*/email-id?value.string
  _recipients

  /*
   * Creating a single string of all our recipients, being in "Name <email@somewhere.com>" format, separated by comma.
   * This string, we store in the above [_recipient] node.
   */
  for-each:x:/@p5.mysql.select/*
    set:x:/@_recipients?value
      src:{0}, {1} <{2}>
        :x:/@_recipients?value
        :x:/@_dp/#/*/name?value
        :x:/@_dp/#/*/email?value
  set:x:/@_recipients?value
    trim:x:/@_recipients?value
      chars:" ,"

  /*
   * Retrieving actual email.
   */
  p5.mysql.select:@"select * from email 
inner join contact on email.sender = contact.id 
where email.id = @emailid"
    @emailid:x:/../*/email-id?value

  /*
   * Making sure we set email as read in database.
   */
  p5.mysql.update:@"update email set isread = 1 where id = @id"
    @id:x:/../*/email-id?value

  /*
   * Making sure we set email as "read" in datagrid displaying email, in addition to displaying it as "open".
   */
  p5.web.widgets.find:sephia-datagrid
    _email-id:x:/../*/email-id?value

  /*
   * Storing fingerprint as string, for later reference.
   */
  _fingerprint
  if:x:/@p5.mysql.select/*/*/fingerprint?value
    set:x:/@_fingerprint?value
      src:" - Fingerprint: '{0}'"
        :x:/@p5.mysql.select/*/*/fingerprint?value

  /*
   * Deleting "unread" CSS class from datagrid for given email.
   */
  sys42.utilities.delete-css-classes:x:/@p5.web.widgets.find/*/*?value
    class:sephia-unread

  /*
   * Adding "open" CSS class to email in datagrid.
   */
  sys42.utilities.add-css-classes:x:/@p5.web.widgets.find/*/*?value
    class:sephia-open

  /*
   * Selecing part from "part" database table, prioritizing "plain" text.
   *
   * Notice, Sephia Mail will prioritize "text/plain" MIME parts, and go to extreme lengths to avoid having to
   * open up an HTML email.
   *
   * Only if an email is sent, without any "plain/text" MIME part, it will open up the HTML part, and when doing so, it
   * will strip the HTML to an extreme amounts, to make 100% certain of that an adversary cannot in any ways inject
   * a malicious piece of HTML/JS into your system.
   *
   * One weird consequence, is that among other things, we don't even display external images, since this might give
   * a spammer, verification of that he has a correct email address.
   *
   * All JavaScript/style attributes, etc, etc, etc - are therefor completely stripped, in addition to images,
   * possibly making the email difficult to read. However, this is done to never compromise security for convenience.
   *
   * If this is a problem, let your friends know that you only accept "plain/text" emails.
   */
  p5.mysql.select:@"select * from part where emailid = @emailid"
    @emailid:x:/../*/email-id?value

  /*
   * This part will contain the content to display to the user.
   */
  _content

  /*
   * Checking if a "plain/text" part exists for this email.
   */
  if:x:@"/@p5.mysql.select/*/*/type/""=plain"""

    /*
     * Plain text content exists for email.
     *
     * Preparing content, which implies exchanging URLs among other things.
     */
    eval-x:x:/+/*
    sys42.utilities.execute-lambda-file:@SEPHIA/inbox/helpers/prepare-plain.hl
      content:x:@"/@p5.mysql.select/*/*/type/""=plain""/./*/content?value"
    set:x:/@_content?value
      src:x:/@sys42.utilities.execute-lambda-file?value

  else-if:x:@"/@p5.mysql.select/*/*/type/""=html"""

    /*
     * No plain text content exists for email, but HTML content exists.
     *
     * Preparing content, which implies removing all potential malicious HTML etc.
     */
    eval-x:x:/+/*
    sys42.utilities.execute-lambda-file:@SEPHIA/inbox/helpers/prepare-html.hl
      content:x:@"/@p5.mysql.select/*/*/type/""=html""/./*/content?value"
    set:x:/@_content?value
      src:x:/@sys42.utilities.execute-lambda-file?value

    /*
     * Since there only existed an HTML part for this particular email, we warn the user with a modal window.
     */
    sys42.windows.confirm
      header:WARNING!
      body:@"<p class=""text-danger"">This email did only have HTML parts. 
We have stripped it down to its minimum, to ensure your safety, hopefully it is possible to read.</p>
<p>Please notify sender that you do not wish to receive HTML emails in the future!</p>
<p>Emails with only HTML content is a known source for fishing attacks, and malware injection. We have protected
you by stripping away everything in the email that is potentially malicious.</p>
<p><strong>Notice!</strong> Be careful when clicking links in the email, and make 100% sure that the email is 
from who it claims to be from, and that you trust its source!</p>
<p>Sorry, Sephia Mail <strong>never</strong> compromises security for convenience ...</p>"

  /*
   * Creating widget that opens email, making sure we unescape any HTML.
   *
   * Notice, in theory also subjects/names/emails might contain HTML, allowing the sender to inject malicious code into
   * your system.
   * Hence, we (to be sure) also HTML encode these parts of the email.
   */
  p5.html.html-encode:x:/@p5.mysql.select/@p5.mysql.select/*/*/subject?value
  p5.html.html-encode:x:/@p5.mysql.select/@p5.mysql.select/*/*/email?value
  p5.html.html-encode:x:/@p5.mysql.select/@p5.mysql.select/*/*/name?value
  p5.html.html-encode:x:/@_recipients?value
  p5.types.date.format:x:/@p5.mysql.select/*/*/date?value

  /*
   * Checking to see if an "after" argument was supplied, and if so, making sure we create the widget
   * after that widget. Otherwise, simply appending the widget into "sephia-read-emails".
   */
  if:x:/../*/after?value
    eval-x:x:/+/*/*
    add:x:/..p5.mysql.connect/*/create-widget
      src
        after:x:/../*/after?value
  else
    add:x:/..p5.mysql.connect/*/create-widget
      src
        parent:sephia-read-emails

  /*
   * Finally, we can create our "reader widget".
   *
   * Creating wrapper for reading email, and injecting it into the main "reader root widget".
   */
  create-widget
    _email-id:x:/@p5.mysql.select/@p5.mysql.select/*/*/id?value
    class:sephia-email col-xs-12
    oninit

      /*
       * Making sure we scroll email into view.
       */
      p5.web.send-javascript:@"$('#{0}')[0].scrollIntoView();"
        :x:/../*/_event?value

    widgets

      /*
       * Input group for "action buttons" for email.
       *
       * Notice, this widget is dynamically populated according to all widgets in the "reader-action-buttons" folder.
       */
      div
        class:btn-group prepend-bottom pull-right sephia-action-buttons
        role:group
        widgets

      /*
       * Subject of email.
       */
      h4
        innerValue:x:/@p5.mysql.connect/*/p5.html.html-encode/[0,1]?value

      /*
       * Body (content) of email.
       */
      p
        class:sephia-reader-pre
        innerValue:x:/@_content?value

      /*
       * All attachments in email.
       */
      div
        class:sephia-attachments
        widgets

      /*
       * Making sure we add a "clearfix" widget, since attachments have float CSS styles.
       */
      literal
        element:div
        class:clearfix

      /*
       * All recipients of email.
       */
      p
        class:sephia-reader-recipients
        innerValue:"Recipient(s): {0}"
          :x:/@p5.mysql.connect/*/p5.html.html-encode/[3,4]?value

      /*
       * "Meta" data of email, date sent, who sent it, name and email, etc.
       */
      p
        class:sephia-reader-meta
        widgets
          span
            innerValue:"From; {0}"
              :x:/@p5.mysql.connect/*/p5.html.html-encode/[2,3]?value
          span
            innerValue:" &lt;{0}&gt;"
              :x:/@p5.mysql.connect/*/p5.html.html-encode/[1,2]?value
          span
            innerValue:"{0} - "
              :x:/@_fingerprint?value
          span
            innerValue:x:/@p5.types.date.format?value




/*
 * Updating title of web page, to reflect unread emails.
 */
sys42.utilities.execute-lambda-file:@SEPHIA/inbox/set-title.hl
