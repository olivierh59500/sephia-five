
/*
 * Opens up the "inbox" of Sephia Mail.
 *
 * Notice, the "inbox" contains all email, also sent emails.
 *
 * Optionally pass in [filter] and [offset] as criteria.
 *
 * [filter] will searchj for only emails matching the given [filter] one wy or another (from, content, subject etc)
 * having the search filter.
 *
 * [offset] is an integer number, meaning at which offset to display items from. For instance, if offset is 10, then
 * only the items between 10 and 20 (optionally) matching the given [filter] will be displayed.
 *
 * Default [filter] is empty, and default [offset] is 0.
 */





/*
 * Defaulting offset to 0 if not given.
 */
if:x:/../*/offset?value
  not
  add:x:/..
    src
      offset:int:0





/*
 * Opening up database connection, making sure we invoke [whoami], to use as criteria for "username" columns
 * in later SQLs.
 */
whoami
p5.mysql.connect:[sephia]

  /*
   * Checking if a filter was provided.
   */
  if:x:/../*/filter?value
    and:x:/../*/filter?value
      !=:

      /*
       * A filter was provided.
       *
       * Modifying SQL we're evaluating below, to make sure we only retrieve items matching the specified 
       * filter condition.
       */
    set:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]?value
      src:@"select * from email 
inner join contact on email.sender = contact.id 
inner join part on email.id = part.emailid
where email.username = @username and part.type = 'plain'
and (subject like @filter or contact.name like @filter or contact.email like @filter or part.content like @filter)
order by email.id desc limit 10 offset @offset"
    add:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]
      src
        @filter:"%{0}%"
          :x:/../*/filter?value

  /*
   * Evaluating actual SQL to retrieve main email records from database.
   */
  p5.mysql.select:@"select * from email 
inner join contact on email.sender = contact.id 
where email.username = @username order by email.id desc limit 10 offset @offset"
    @username:x:/@whoami/*/username?value
    @offset:x:/../*/offset?value

  /*
   * Looping through result set from SQL command.
   */
  for-each:x:/@p5.mysql.select/*

    /*
     * CSS class for HTML table row, which differs is email is read, unread, has attachments, etc.
     */
    _class:sephia-email-row

    /*
     * Checking if email has been read.
     *
     * Emails that are already read by user, are rendered with visual clues, indicating they have already been read.
     */
    if:x:/@_dp/#/*/isread?value.int
      =:int:0
      set:x:/@_class?value
        src:{0} sephia-unread
          :x:/@_class?value

    /*
     * Checking if email has been sent by user.
     *
     * Notice, we only have one single "inbox", which contains all emails, both those sent by user himself, and those
     * received from others.
     *
     * Emails are rendered with visual clues though, indicating whether or not they've been sent by user himself, 
     * received from others, etc.
     */
    if:x:/@_dp/#/*/type?value
      =:sent
      set:x:/@_class?value
        src:{0} sephia-outbox
          :x:/@_class?value
      add:x:/..for-each/*/create-widget
        src
          title:This email was sent by you!
    else
      add:x:/..for-each/*/create-widget
        src
          title:{0} &lt;{1}&gt;
            :x:/@_dp/#/*/name?value
            :x:/@_dp/#/*/email?value

    /*
     * Checking if email has attachments.
     *
     * We display visual clues for emails having attachments.
     */
    p5.mysql.scalar:@"select count(*) from attachments where emailid = @emailid"
      @emailid:x:/@_dp/#/*/id?value
    if:x:/@p5.mysql.scalar?value
      >:long:0
      set:x:/@_class?value
        src:{0} sephia-has-attachment
          :x:/@_class?value

    /*
     * Checking if email is encrypted.
     *
     * We display visual clues for emails that are encrypted.
     */
    if:x:/@_dp/#/*/encrypted?value.int
      =:int:1
      set:x:/@_class?value
        src:{0} sephia-encrypted
          :x:/@_class?value

    /*
     * Checking if email is signed.
     *
     * We display visual clues for emails that have been cryptographically signed.
     */
    if:x:/@_dp/#/*/signature?value
      set:x:/@_class?value
        src:{0} sephia-signed
          :x:/@_class?value

    /*
     * Checking if email is already open.
     *
     * Notice, opened emails are rendered in our datagrid with "visual clues" to signal that they're already opened
     * up for viewing.
     *
     * Opened email here, refer to emails that user is already reading, in the "reader" parts of Sephia Mail.
     */
    p5.web.widgets.find:sephia-read-emails
      _email-id:x:/@_dp/#/*/id?value
    if:x:/@p5.web.widgets.find/*/*
      set:x:/@_class?value
        src:{0} sephia-open
          :x:/@_class?value

    /*
     * Nicely formatting date.
     */
    p5.types.date.format:x:/@_dp/#/*/date?value

    /*
     * Creating table row for email item, and inserting row widget into "table datagrid" for emails.
     */
    create-widget
      parent:sephia-datagrid
      element:tr
      class:x:/@_class?value
      _email-id:x:/@_dp/#/*/id?value
      role:button
      onclick

        /*
         * Open email for reading, by invoking file responsible for doing such, passing in ID of email user wants to read.
         */
        p5.web.widgets.property.get:x:/../*/_event?value
          _email-id
        eval-x:x:/+/*
        sys42.utilities.execute-lambda-file:@SEPHIA/inbox/read.hl
          email-id:x:/@p5.web.widgets.property.get/*/*?value

      widgets

        /*
         * "From" column.
         */
        td
          widgets
            span
              innerValue:x:/@_dp/#/*/name?value

        /*
         * "Subject" column.
         */
        td
          innerValue:x:/@_dp/#/*/subject?value

        /*
         * "Date" column.
         *
         * Notice, emails are not sorted by dates, since that might create "weird results", if sender's SMTP server
         * is wrongly configured in regards to what time it it.
         *
         * Hence, sometimes, theoretically, an email with a newer date,might render after another email, being "older".
         *
         * This is because emails are rendered in the order they are received, which is more "correct" to use as ordering
         * of emails.
         */
        td
          widgets
            span
              innerValue:x:/@p5.types.date.format?value





/*
 * Updating title of web page, to reflect unread emails.
 */
sys42.utilities.execute-lambda-file:@SEPHIA/inbox/set-title.hl
