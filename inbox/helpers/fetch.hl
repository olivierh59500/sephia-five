
/*
 * Fetches next 10 emails.
 *
 * Notice, this file is "recursively evaluated" by injecting an Ajax event on page, checking for email every 2 minutes,
 * unless we fetched 10 emails from pop server, at which point it is immediately re-invoked, from page, through invoking
 * the same Ajax event immediately.
 *
 * The Ajax event it invokes, is called [.onretrieve], and can be found in our "create-main-form.hl" Hyperlambda file.
 */





/*
 * Tracking if anything was actually inserted into the database.
 */
_new-emails:bool:false





/*
 * Retrieving POP3 settings, and fetching next 5 emails from POP3 server.
 *
 * Notice, we supply an [.onfinished] lambda, such that if we fail to insert items into database du to an exception for instamce, 
 * the entire transaction will be rolled back, and no QUIT signal will be sent to POP3 server.
 * 
 */
p5.auth.my-settings.get
eval-x:x:/+/*/decrypt/**
p5.pop3.get
  server:x:/@p5.auth.my-settings.get/*/sephia/*/pop3-server?value
  port:x:/@p5.auth.my-settings.get/*/sephia/*/pop3-port?value
  ssl:x:/@p5.auth.my-settings.get/*/sephia/*/pop3-use-ssl?value
  username:x:/@p5.auth.my-settings.get/*/sephia/*/pop3-username?value
  password:x:/@p5.auth.my-settings.get/*/sephia/*/pop3-password?value
  count:10
  attachment-folder:~/documents/private/sephia/attachments/
  decrypt
    email:x:/@p5.auth.my-settings.get/*/sephia/*/email?value
      password:x:/@p5.auth.my-settings.get/*/sephia/*/gpg-password?value
  .onfinished

    /*
     * Connecting to database.
     */
    p5.mysql.connect:[sephia]
      p5.mysql.transaction.begin

        /*
         * Stuffing emails into database, storing whether or not there were any new emails.
         */
        whoami
        for-each:x:/@p5.pop3.get/*/envelope

          /*
           * Checking if email has alread been fetched from POP server
           */
          p5.mysql.scalar:@"select count(*) from emails where mimeid = @mimeid"
            @mimeid:x:/@_dp/#?value
          if:x:/@p5.mysql.scalar?value
            >:long:0

            /*
             * Email has already been fetched.
             * No need to continue.
             */
            continue

          /*
           * Making sure we store the fact that we inserted a new email, such that we know if we should refresh the
           * datagrid or not.
           */
          set:x:/@_new-emails?value
            src:bool:true

          /*
           * Making sure we store the "from" database ID.
           */
          _from

          /*
           * Stuffing emails into "contact" table, but only the [From] header initially.
           * Rest of email addresses are handled further down.
           */
          p5.mysql.select:@"select name, id from contacts where email = @email and username = @username"
            @email:x:/@_dp/#/*/From/*?value
            @username:x:/@whoami/*/username?value

          /*
           * Checking if entry exists.
           */
          if:x:/@p5.mysql.select/*?count
            =:int:0

            /*
             * Doesn't exist, inserting new entry.
             */
            p5.mysql.insert:@"insert into contacts (name, email, username) value (@name, @email, @username)"
              @name:x:/@_dp/#/*/From/0?name
              @email:x:/@_dp/#/*/From/0?value
              @username:x:/@whoami/*/username?value
            set:x:/@_from?value
              src:x:/@p5.mysql.insert/*/id?value

          else-if:x:/@p5.mysql.select/0/*/name?name
            !=:x:/@_dp/#/*/From/*?name
            and:x:/@_dp/#/*/From/*?name
              !=:Anonymous

            /*
             * Exists, but name has been updated.
             * Notice, we do NOT update if name from POP3 server is "Anonymous".
             */
            p5.mysql.update:@"update contacts set name = @name where id = @id"
              @id:x:/@p5.mysql.select/0/*/id?value
              @name:x:/@_dp/#/*/From/*?name
            set:x:/@_from?value
              src:x:/@p5.mysql.select/0/*/id?value

          else

            /*
             * Exists, and there are no changes.
             */
            set:x:/@_from?value
              src:x:/@p5.mysql.select/0/*/id?value

          /*
           * Checking if email was signed/encrypted, and if so, making sure we pass in email of first signature to "email" table insertion.
           */
          _signature
          _fingerprint
          _encrypted:int:0
          if:x:/@_dp/#/*/*/signature/*?value
            set:x:/@_signature?value
              src:x:/@_dp/#/*/*/signature/0?name
            set:x:/@_fingerprint?value
              src:x:/@_dp/#/*/*/signature/0/0?value
          if:x:/@_dp/#/*/multipart/*/decryption-key
            set:x:/@_encrypted?value
              src:int:1

          /*
           * Now inserting into "email" table.
           */
          if:x:/@_dp/#/*/Subject?value
            not
            set:x:/@_dp/#/*/Subject?value
              src:
          p5.mysql.insert:@"insert into emails (subject, date, sender, username, isread, mimeid, signature, fingerprint, encrypted, type) values (@subject, @date, @sender, @username, 0, @mimeid, @signature, @fingerprint, @encrypted, 'received')"
            @subject:x:/@_dp/#/*/Subject?value
            @date:x:/@_dp/#/*/Date?value
            @sender:x:/@_from?value.uint
            @username:x:/@whoami/*/username?value
            @mimeid:x:/@_dp/#?value
            @signature:x:/@_signature?value
            @fingerprint:x:/@_fingerprint?value
            @encrypted:x:/@_encrypted?value

          /*
           * Now inserting into "attachment" table.
           */
          for-each:x:/@_dp/#/**/filename
            p5.mysql.insert:@"insert into attachments (filename, prefix, folder, emailid) values (@filename, @prefix, @folder, @emailid)"
              @filename:x:/@_dp/#?value
              @prefix:x:/@_dp/#/*/prefix?value
              @folder:x:/@_dp/#/*/folder?value
              @emailid:x:/@for-each/@p5.mysql.insert/*/id?value

          /*
           * Now inserting into "part" table.
           */
          for-each:x:/@_dp/#/**/text/*/content/.
            p5.mysql.insert:@"insert into parts (type, content, emailid) values (@type, @content, @emailid)"
              @type:x:/@_dp/#?value
              @content:x:/@_dp/#/*/content?value
              @emailid:x:/@for-each/@p5.mysql.insert/*/id?value

          /*
           * Stuffing emails into "contact" and "recipients" tables.
           */
          for-each:x:/@_dp/#/*(/To|/Cc|/Bcc)/*

            /*
             * Used to hold "contact" database ID, for later insertion into "recipients" table.
             */
            _contact-id

            /*
             * Checking if contact exists in database "contact" table.
             */
            p5.mysql.select:@"select name, id from contacts where email = @email and username = @username"
              @email:x:/@_dp/#?value
              @username:x:/@whoami/*/username?value

            /*
             * Checking if entry exists.
             */
            if:x:/@p5.mysql.select/*?count
              =:int:0

              /*
               * Doesn't exist, inserting new entry.
               * Making sure we default name to "Anonymous", unless explicitly given.
               */
              if:x:/@_dp/#?name
                =:
                or:x:/@_dp/#?name
                  not
                set:x:/@_dp/#?name
                  src:Anonymous
              p5.mysql.insert:@"insert into contacts (name, email, username) value (@name, @email, @username)"
                @name:x:/@_dp/#?name
                @email:x:/@_dp/#?value
                @username:x:/@whoami/*/username?value
              set:x:/@_contact-id?value
                src:x:/@p5.mysql.insert/*/id?value

            else-if:x:/@p5.mysql.select/0/*/name?value
              !=:x:/@_dp/#?name
              and:x:/@_dp/#?name
                !=:
              and:x:/@_dp/#?name

              /*
               * Exists, but name has been updated.
               */
              p5.mysql.update:@"update contacts set name = @name where id = @id"
                @name:x:/@_dp/#?name
                @id:x:/@p5.mysql.select/0/*/id?value
              set:x:/@_contact-id?value
                src:x:/@p5.mysql.select/0/*/id?value

            else

              /*
               * Exists, and there are no changes.
               */
              set:x:/@_contact-id?value
                src:x:/@p5.mysql.select/0/*/id?value

            /*
             * Inserting into "recipients" table.
             */
            p5.mysql.insert:@"insert into recipients (contactid, type, emailid) values (@contactid, @type, @emailid)"
              @contactid:x:/@_contact-id?value
              @type:x:/@_dp/#/.?name
              @emailid:x:/@for-each/@p5.mysql.insert/*/id?value

        /*
         * Checking if there was 10 messages fetched, at which point we make sure we do another "roundtrip" to POP3 server.
         */
        if:x:/@p5.pop3.get/*/envelope?count
          >=:int:10

          /*
           * Roundtripping to fetch "next batch".
           */
          p5.web.send-javascript:@"p5.$('sephia-retriever').raise('.onretrieve');"

        else

          /*
           * Roundtripping to 5 minutes from now to check for more emails.
           */
          p5.web.send-javascript:@"setTimeout (function() {p5.$('sephia-retriever').raise('.onretrieve')}, 300000);"

        /*
         * Commit database transaction.
         *
         * Notice, if we come this far, without exceptions, and the commit below succeeds, the [p5.pop3.get] event
         * will send the QUIT signal to the POP3 server, committing the transaction, registering emails as deleted on POP3 server.
         */
        p5.mysql.transaction.commit





/*
 * Returning true if there was any unread emails on POP server.
 */
return:x:/@_new-emails?value
